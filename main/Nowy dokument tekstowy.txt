
#include "DHT.h"
#include <LCDWIKI_GUI.h> //Core graphics library
#include <LCDWIKI_SPI.h> //Hardware-specific library
#include <EEPROM.h>
#include <RTClock.h>

#define DHTPIN PA8
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

RTClock rt (RTCSEL_LSI); // initialise
uint32 tt;


//LCDWIKI_SPI mylcd(SSD1283A,10,9,8,-1); //Pro Mini
//LCDWIKI_SPI mylcd(SSD1283A,15,16,4,-1); //ESP8266
//LCDWIKI_SPI mylcd(SSD1283A,PA_15,PA_14,PA_13,PA_8); //Maple mini //hardware spi,cs,cd,reset
LCDWIKI_SPI mylcd(SSD1283A, PA4, PB10, PB11, -1); //Maple mini //cs,cd,reset,led
//LCDWIKI_SPI mylcd(SSD1283A,PB_11,PB_10,PA_8,PB_6,PB_12,PB_7,-1);//software spi,model,cs,cd,miso,mosi,reset,clk,led

#define LED_PIN PB1
#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF
#define EEPROM_TRIP  0
#define GEAR_POS_X 82
#define GEAR_POS_Y 22
#define GEAR_SIZE_X 46
#define GEAR_SIZE_Y 46
#define GEAR_SIZE_FONT 5
#define SHIFT_LIGHT_RPM 6000

int16_t engineTempPOSX = 50;
int16_t engineTempPOSY = 8;
int16_t externalTempPOSX = 118;
int16_t externalTempPOSY = 5;
int16_t dateTimePOSX = 2;
int16_t dateTimePOSY = 24;
int16_t odometrPOSX = 2;
int16_t odometrPOSY = 106;
int16_t tripPOSX = 116;
int16_t tripPOSY = 88;

int16_t lastEngineTemp;
int16_t lastTemp;
int16_t lastGear;
int16_t rpm;
long lastTrip;
long lastOdometr;
int lastTime;
String lastDate;


float i = -20;
float g = 0;
void showtime() {
    // get and print actual RTC timestamp
    rt.breakTime(rt.now(), tm);
    memset(buf,0,BUFLEN);
    sprintf(buf, "RTC timestamp: %u-%u-%u, %02u:%02u:%02u",
        tm.year+1970, tm.month, tm.day, tm.hour, tm.minute, tm.second);
    Serial.println(buf);
    clearbuf();

    Serial.print("last adj:");
    rt.breakTime(getbkptime(), tm);
    memset(buf,0,BUFLEN);
    sprintf(buf, "RTC timestamp: %u-%u-%u, %02u:%02u:%02u",
        tm.year+1970, tm.month, tm.day, tm.hour, tm.minute, tm.second);
    Serial.println(buf);
    clearbuf();

    Serial.print(F("drift duration, number of seconds for the stm32 rtc to drift 1 secs (faster):"));
    Serial.println(getdrift());

    Serial.print(F("BKP_RTCCR:"));
    Serial.println(getrtccr());
}

void blink ()
{
  digitalWrite(LED_PIN, !digitalRead(LED_PIN));
}

long EEPROMReadlong(long address) {
  long four = EEPROM.read(address);
  long three = EEPROM.read(address + 1);
  long two = EEPROM.read(address + 2);
  long one = EEPROM.read(address + 3);
  return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
}
void EEPROMWritelong(int address, long value) {
  byte four = (value & 0xFF);
  byte three = ((value >> 8) & 0xFF);
  byte two = ((value >> 16) & 0xFF);
  byte one = ((value >> 24) & 0xFF);

  EEPROM.write(address, four);
  EEPROM.write(address + 1, three);
  EEPROM.write(address + 2, two);
  EEPROM.write(address + 3, one);
}
unsigned int trip = 0;
void setup()
{

  Serial.begin(115200);
  EEPROM.init(0x801F000, 0x801F800, 0x400);
  trip = EEPROMReadlong(EEPROM_TRIP);
  dht.begin();
  mylcd.Init_LCD();
  mylcd.Set_Rotation(1);
  mylcd.Set_Text_Mode(1);
  mylcd.Fill_Screen(WHITE);
  animation();
  initTemp();
  initGear();
  pinMode(LED_PIN, OUTPUT);

  rt.attachSecondsInterrupt(blink);// Call blink
  Serial.println("init setup: done");
}
void loop() {
if (rt.getTime()!=tt)
  {
    tt = rt.getTime();
    
    
  }
  Serial.println(showtime());
  //digitalWrite(PB1, HIGH);
  setEngineTemp(i);
  setExternalTemp();
  setGear(g);
  setDate("20/09/2019");
  setTime(10, 10, 10);
  setOdometr(trip);
  setTrip(trip);
  trip++;

  if (trip > 9999) {
    trip = 0;
  }
  else {
    EEPROMWritelong(EEPROM_TRIP, trip);
  }
  //EEPROM_writeDouble(EEPROM_TRIP, trip);

  g++;
  if (i == 120) i = 0;
  i++;
  if (g == 7) g = 0;
  //mylcd.Invert_Display(1);
  delay(100);
}
void animation()
{
  mylcd.Set_Text_colour(BLACK);
  mylcd.Set_Text_Size(3);
  mylcd.Print_String("HONDA", 20, GEAR_POS_Y + GEAR_SIZE_Y - 18);
  mylcd.Set_Text_Size(2);
  mylcd.Print_String("VARADERO", 16, GEAR_POS_Y + GEAR_SIZE_Y + 14);
  delay(2000);
  mylcd.Set_Draw_color(WHITE);
  mylcd.Fill_Rectangle(2, GEAR_POS_Y + 18, 128, 128);

}

void setTrip(float km)
{

  if (lastTrip != km) {
    lastTrip = km;
    String kmInt = String(km).substring(0, String(km).length() - 3);
    String kmDec = String(km).substring(String(km).length() - 2, String(km).length() - 1);
    mylcd.Set_Draw_color(WHITE);
    short offset = (String(kmInt).length() * 12);
    mylcd.Fill_Rectangle(tripPOSX - offset, tripPOSY, tripPOSX, tripPOSY + 13);
    mylcd.Set_Draw_color(BLACK);
    mylcd.Fill_Rectangle(tripPOSX, tripPOSY, tripPOSX + 12, tripPOSY + 13);
    mylcd.Set_Text_Size(2);
    mylcd.Set_Text_colour(BLACK);
    mylcd.Print_String(kmInt, tripPOSX - offset, tripPOSY);
    mylcd.Set_Text_Size(1);
    mylcd.Print_String("TRIP", 2, tripPOSY + 19);
    mylcd.Set_Text_Size(2);
    mylcd.Set_Text_colour(WHITE);
    mylcd.Print_String(kmDec, tripPOSX + 2, tripPOSY);
  }
}

void setOdometr(float km)
{
  if (lastOdometr != km) {
    lastOdometr = km;

    mylcd.Set_Draw_color(WHITE);
    mylcd.Fill_Rectangle(odometrPOSX, odometrPOSY - 1, odometrPOSX + 125, odometrPOSY + 20);
    mylcd.Set_Text_colour(BLACK);
    mylcd.Set_Text_Size(3);
    String kmInt = String(km).substring(0, String(km).length() - 3);
    String kmDec = String(km).substring(String(km).length() - 2, String(km).length() - 1);

    mylcd.Print_String(kmInt, 130 - (kmInt.length() * 18 + 2 + 18), odometrPOSY);

    //mylcd.Print_String(kmInt, odometrPOSX+2, odometrPOSY);

    mylcd.Set_Draw_color(BLACK);
    mylcd.Fill_Rectangle(130 - (20), odometrPOSY - 1, 130 - (2), odometrPOSY + 21);
    mylcd.Set_Text_colour(WHITE);
    mylcd.Print_String(kmDec, 130 - (18), odometrPOSY);

    //mylcd.Print_String(kmDec, kmInt.length()*18+4, odometrPOSY);
  }

}

void setDate(String curDate)
{
  if (lastDate != curDate) {
    lastDate = curDate;
    mylcd.Set_Draw_color(WHITE);
    mylcd.Fill_Rectangle(dateTimePOSX, dateTimePOSY, dateTimePOSX + 78, dateTimePOSY + 6);
    mylcd.Set_Text_colour(BLACK);
    mylcd.Set_Text_Size(1);
    mylcd.Print_String(String(curDate), dateTimePOSX + 8, dateTimePOSY);
  }
}

void setTime(int16_t hour, int16_t minute, int16_t second)
{
  if (lastTime != hour + minute + second) {
    lastTime = hour + minute + second;
    mylcd.Set_Draw_color(WHITE);
    mylcd.Fill_Rectangle(dateTimePOSX, dateTimePOSY + 10, dateTimePOSX + 78, dateTimePOSY + 23);
    mylcd.Set_Text_colour(BLACK);
    mylcd.Set_Text_Size(2);
    mylcd.Print_String(String(hour), dateTimePOSX, dateTimePOSY + 10);
    mylcd.Print_String(":", dateTimePOSX + 21, 34);
    mylcd.Print_String(String(minute), dateTimePOSX + 27, 34);
    mylcd.Print_String(":", dateTimePOSX + 48, 34);
    mylcd.Print_String(String(second), dateTimePOSX + 54, 34);
  }

}

void initGear()
{
  mylcd.Set_Draw_color(BLACK);
  mylcd.Draw_Rectangle(GEAR_POS_X, GEAR_POS_Y, GEAR_POS_X + GEAR_SIZE_X, GEAR_POS_Y + GEAR_SIZE_Y);
}

void setGear(int16_t gear)
{
  if (lastGear != gear) {
    lastGear = gear;
    if (rpm > SHIFT_LIGHT_RPM) {
      mylcd.Set_Draw_color(RED);
    }
    else {
      mylcd.Set_Draw_color(WHITE);
    }
    mylcd.Fill_Rectangle(GEAR_POS_X + 1, GEAR_POS_Y + 1, GEAR_POS_X + GEAR_SIZE_X - 1, GEAR_POS_Y + GEAR_SIZE_Y - 1);
    mylcd.Set_Text_colour(BLACK);
    //mylcd.Set_Text_Size(1);
    //mylcd.Print_String("GEAR", 95, 22);
    mylcd.Set_Text_Size(GEAR_SIZE_FONT);
    if (gear == 0) {
      mylcd.Print_String("N", GEAR_POS_X + 12, GEAR_POS_Y + 6);
    }
    else {
      mylcd.Print_String(String(gear), GEAR_POS_X + 12, GEAR_POS_Y + 6);
    }
  }
}

void initTemp()
{
  mylcd.Set_Draw_color(BLACK);
  mylcd.Draw_Rectangle(2, 2, 128, 20);
  mylcd.Draw_Rectangle(82, 2, 128, 20);
}

void setEngineTemp(int16_t curTemp)
{
  if (lastEngineTemp != curTemp) {
    lastEngineTemp = curTemp;
    //clear screan
    mylcd.Set_Draw_color(WHITE);
    mylcd.Fill_Rectangle(4, 4, 80, 18);
    if (curTemp > 100) {
      mylcd.Set_Draw_color(RED);
    }
    else {
      mylcd.Set_Draw_color(BLACK);
    }
    mylcd.Fill_Rectangle(4, 4, map(curTemp, 0, 120, 4, 80), 18);


    //draw value
    mylcd.Set_Text_Size(1);
    mylcd.Set_Text_colour(BLUE);
    short offset = (String(curTemp).length() * 6);
    mylcd.Print_String(String(curTemp), engineTempPOSX - offset, engineTempPOSY);

    //draw circle
    mylcd.Set_Draw_color(BLUE);
    mylcd.Draw_Circle(engineTempPOSX + 1, engineTempPOSY, 1);
  }

}

void setExternalTemp()
{
  int curTemp;
  curTemp = dht.readTemperature();
  if (curTemp == lastTemp) {
    return;
  }
  lastTemp = curTemp;
  //clear screan
  mylcd.Set_Draw_color(WHITE);
  short offset = (String(curTemp).length() * 12);
  mylcd.Fill_Rectangle(externalTempPOSX - offset, externalTempPOSY, externalTempPOSX, externalTempPOSY + 13);

  //draw value
  mylcd.Set_Text_Size(2);
  mylcd.Set_Text_colour(BLACK);
  mylcd.Set_Text_Back_colour(WHITE);
  mylcd.Print_String(String(curTemp), externalTempPOSX - offset, externalTempPOSY);

  //draw circle
  mylcd.Set_Draw_color(BLACK);
  mylcd.Draw_Circle(externalTempPOSX + 1, externalTempPOSY + 2, 2);
}



